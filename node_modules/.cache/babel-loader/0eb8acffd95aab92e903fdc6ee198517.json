{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { uuid } from './Utils';\n\nvar injectScriptTag = function (doc, item, handler) {\n  var _a, _b;\n\n  var scriptTag = doc.createElement('script');\n  scriptTag.referrerPolicy = 'origin';\n  scriptTag.type = 'application/javascript';\n  scriptTag.id = item.id;\n  scriptTag.src = item.src;\n  scriptTag.async = (_a = item.async) !== null && _a !== void 0 ? _a : false;\n  scriptTag.defer = (_b = item.defer) !== null && _b !== void 0 ? _b : false;\n\n  var loadHandler = function () {\n    scriptTag.removeEventListener('load', loadHandler);\n    scriptTag.removeEventListener('error', errorHandler);\n    handler(item.src);\n  };\n\n  var errorHandler = function (err) {\n    scriptTag.removeEventListener('load', loadHandler);\n    scriptTag.removeEventListener('error', errorHandler);\n    handler(item.src, err);\n  };\n\n  scriptTag.addEventListener('load', loadHandler);\n  scriptTag.addEventListener('error', errorHandler);\n\n  if (doc.head) {\n    doc.head.appendChild(scriptTag);\n  }\n};\n\nvar createDocumentScriptLoader = function (doc) {\n  var lookup = {};\n\n  var scriptLoadOrErrorHandler = function (src, err) {\n    var item = lookup[src];\n    item.done = true;\n    item.error = err;\n\n    for (var _i = 0, _a = item.handlers; _i < _a.length; _i++) {\n      var h = _a[_i];\n      h(src, err);\n    }\n\n    item.handlers = [];\n  };\n\n  var loadScripts = function (items, success, failure) {\n    // eslint-disable-next-line no-console\n    var failureOrLog = function (err) {\n      return failure !== undefined ? failure(err) : console.error(err);\n    };\n\n    if (items.length === 0) {\n      failureOrLog(new Error('At least one script must be provided'));\n      return;\n    }\n\n    var successCount = 0;\n    var failed = false;\n\n    var loaded = function (_src, err) {\n      if (failed) {\n        return;\n      }\n\n      if (err) {\n        failed = true;\n        failureOrLog(err);\n      } else if (++successCount === items.length) {\n        success();\n      }\n    };\n\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var item = items_1[_i];\n      var existing = lookup[item.src];\n\n      if (existing) {\n        if (existing.done) {\n          loaded(item.src, existing.error);\n        } else {\n          existing.handlers.push(loaded);\n        }\n      } else {\n        // create a new entry\n        var id = uuid('tiny-');\n        lookup[item.src] = {\n          id: id,\n          src: item.src,\n          done: false,\n          error: null,\n          handlers: [loaded]\n        };\n        injectScriptTag(doc, __assign({\n          id: id\n        }, item), scriptLoadOrErrorHandler);\n      }\n    }\n  };\n\n  var deleteScripts = function () {\n    var _a;\n\n    for (var _i = 0, _b = Object.values(lookup); _i < _b.length; _i++) {\n      var item = _b[_i];\n      var scriptTag = doc.getElementById(item.id);\n\n      if (scriptTag != null && scriptTag.tagName === 'SCRIPT') {\n        (_a = scriptTag.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(scriptTag);\n      }\n    }\n\n    lookup = {};\n  };\n\n  var getDocument = function () {\n    return doc;\n  };\n\n  return {\n    loadScripts: loadScripts,\n    deleteScripts: deleteScripts,\n    getDocument: getDocument\n  };\n};\n\nvar createScriptLoader = function () {\n  var cache = [];\n\n  var getDocumentScriptLoader = function (doc) {\n    var loader = cache.find(function (l) {\n      return l.getDocument() === doc;\n    });\n\n    if (loader === undefined) {\n      loader = createDocumentScriptLoader(doc);\n      cache.push(loader);\n    }\n\n    return loader;\n  };\n\n  var loadList = function (doc, items, delay, success, failure) {\n    var doLoad = function () {\n      return getDocumentScriptLoader(doc).loadScripts(items, success, failure);\n    };\n\n    if (delay > 0) {\n      setTimeout(doLoad, delay);\n    } else {\n      doLoad();\n    }\n  };\n\n  var reinitialize = function () {\n    for (var loader = cache.pop(); loader != null; loader = cache.pop()) {\n      loader.deleteScripts();\n    }\n  };\n\n  return {\n    loadList: loadList,\n    reinitialize: reinitialize\n  };\n};\n\nexport var ScriptLoader = createScriptLoader();","map":null,"metadata":{},"sourceType":"module"}